<!DOCTYPE html>
<html lang="pt-BR">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>User Stories Helper — MVP (HTML + Tailwind + Alpine)</title>
  <meta name="color-scheme" content="light dark" />
  <link rel="preconnect" href="https://fonts.googleapis.com">
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
  <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
  <script src="https://cdn.tailwindcss.com"></script>
  <link href="https://cdn.jsdelivr.net/npm/flowbite@3.1.2/dist/flowbite.min.css" rel="stylesheet" />
  <script        </section>

        <!-- Sidebar Column -->
        <aside class="space-y-6">  tailwind.config = {
      darkMode: 'class',
      content: [
        "./src/**/*.{html,js}",
        "./node_modules/flowbite/**/*.js"
      ],
      theme: {
        extend: {
          animation: {
            'fade-in': 'fadeIn 0.3s ease-in-out',
            'scale-in': 'scaleIn 0.2s ease-out',
          },
          backdropBlur: {
            xs: '2px',
          },
          colors: {
            primary: {
              "50": "#eff6ff",
              "100": "#dbeafe", 
              "200": "#bfdbfe",
              "300": "#93c5fd",
              "400": "#60a5fa",
              "500": "#3b82f6",
              "600": "#2563eb",
              "700": "#1d4ed8",
              "800": "#1e40af",
              "900": "#1e3a8a",
              "950": "#172554"
            }
          }
        },
        fontFamily: {
          'body': [
            'Inter', 
            'ui-sans-serif', 
            'system-ui', 
            '-apple-system', 
            'system-ui', 
            'Segoe UI', 
            'Roboto', 
            'Helvetica Neue', 
            'Arial', 
            'Noto Sans', 
            'sans-serif', 
            'Apple Color Emoji', 
            'Segoe UI Emoji', 
            'Segoe UI Symbol', 
            'Noto Color Emoji'
          ],
          'sans': [
            'Inter', 
            'ui-sans-serif', 
            'system-ui', 
            '-apple-system', 
            'system-ui', 
            'Segoe UI', 
            'Roboto', 
            'Helvetica Neue', 
            'Arial', 
            'Noto Sans', 
            'sans-serif', 
            'Apple Color Emoji', 
            'Segoe UI Emoji', 
            'Segoe UI Symbol', 
            'Noto Color Emoji'
          ]
        }
      },
      plugins: []
    }
  </script>
  <style>
    /* Evitar FOUC quando Alpine carrega */
    [x-cloak] { 
      display: none !important; 
    }
    
    /* Animações suaves para transições */
    @keyframes fadeIn {
      from { opacity: 0; transform: translateY(10px); }
      to { opacity: 1; transform: translateY(0); }
    }
    
    .animate-fade-in {
      animation: fadeIn 0.3s ease-in-out;
    }
  </style>

  <!-- Dark mode script - deve ser executado antes de qualquer coisa para evitar flash -->
  <script>
    // Inicialização imediata do dark mode seguindo padrões Flowbite
    (function() {
      const darkModeKey = 'user-stories-dark-mode';
      let isDark = false;
      
      try {
        const saved = localStorage.getItem(darkModeKey);
        if (saved !== null) {
          isDark = JSON.parse(saved);
        } else {
          // Se não há preferência salva, usar preferência do sistema
          isDark = window.matchMedia('(prefers-color-scheme: dark)').matches;
        }
      } catch(e) {
        console.warn('Erro ao carregar preferência de dark mode:', e);
        isDark = false;
      }
      
      // Aplicar imediatamente para evitar flash
      if (isDark) {
        document.documentElement.classList.add('dark');
      } else {
        document.documentElement.classList.remove('dark');
      }
      
      // Salvar no window para usar no Alpine
      window.__darkModeState = isDark;
    })();
  </script>
  <!--
    Fix principal: registrar o componente via `Alpine.data` no evento `alpine:init`
    e usar x-data="app" (sem invocar função). Isso elimina condições de corrida
    quando o Alpine inicializa antes da função global existir.
  -->
  <script>
    // Fallback para crypto.randomUUID em navegadores antigos
    (function(){
      if (!('crypto' in window) || !('randomUUID' in window.crypto)) {
        window.crypto = window.crypto || {};
        window.crypto.randomUUID = function(){
          const s4 = () => Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);
          return `${Date.now().toString(16)}-${s4()}-${s4()}-${s4()}-${s4()}${s4()}${s4()}`;
        };
      }
    })();

    document.addEventListener('alpine:init', () => {
      Alpine.data('app', () => ({
        storageKey: 'user-stories-helper-v1',
        darkModeKey: 'user-stories-dark-mode',
        isDarkMode: window.__darkModeState || false,
        ambiguousTerms: ['rápido','fácil','simples','intuitivo','eficiente','robusto','escalável','otimizado','seguro','melhor','estável','confiável','flexível'],
        lint: { issues: [] },
        checks: { persona: false, value: false, criteria: false, dependencies: false, size: false },
        story: {
          title: '',
          persona: '',
          action: '',
          benefit: '',
          description: '',
          dependencies: '',
          tags: '',
          priority: '',
          estimate: '',
          criteria: []
        },
        tests: [],
        // --- Helpers ---
        userStoryLine() {
          const p = (this.story.persona || '').trim();
          const a = (this.story.action || '').trim();
          const b = (this.story.benefit || '').trim();
          if (!p && !a && !b) return '—';
          return 'Como ' + (p || '[persona]') + ', eu quero ' + (a || '[ação]') + ' para ' + (b || '[benefício]') + '.';
        },
        autoTitle() {
          if (!this.story.title) {
            const base = [this.story.action || '', this.story.benefit || ''].filter(Boolean).join(' — ');
            this.story.title = base || 'Nova história';
          }
        },
        addScenario() {
          this.story.criteria.push({ id: crypto.randomUUID(), given: '', when: '', then: '' });
          this.saveLocal();
        },
        removeScenario(i) { this.story.criteria.splice(i,1); this.saveLocal(); },
        generateHappyPath() {
          const given = this.story.persona ? ('que sou ' + this.story.persona.toLowerCase() + ' autenticado') : 'que estou autenticado';
          const when = this.story.action ? this.story.action : 'realizo a ação principal';
          const then = this.story.benefit ? ('então alcanço ' + this.story.benefit) : 'então vejo o resultado esperado';
          this.story.criteria.push({ id: crypto.randomUUID(), given, when, then });
          this.checks.criteria = true;
          this.saveLocal();
        },
        gherkinBlock() {
          const title = (this.story.title || 'Funcionalidade');
          const lines = [ 'Feature: ' + title ];
          this.story.criteria.forEach((sc, i) => {
            lines.push('  Scenario: Cenário ' + (i+1));
            if (sc.given) lines.push('    Given ' + sc.given);
            if (sc.when)  lines.push('    When ' + sc.when);
            if (sc.then)  lines.push('    Then ' + sc.then);
          });
          return lines.join('\n');
        },
        markdown() {
          const parts = [];
          parts.push('# ' + (this.story.title || 'Sem título'));
          parts.push('');
          parts.push('**User Story**');
          parts.push(this.userStoryLine());
          if (this.story.description) { parts.push('', '**Descrição**', this.story.description); }
          const meta = [];
          if (this.story.dependencies) meta.push('**Dependências:** ' + this.story.dependencies);
          if (this.story.tags) meta.push('**Tags:** ' + this.story.tags);
          if (this.story.priority || this.story.estimate) meta.push('**Prioridade/Estimativa:** ' + (this.story.priority || '—') + ' • ' + (this.story.estimate ? this.story.estimate + ' pts' : '—'));
          if (meta.length) parts.push('', ...meta);
          if (this.story.criteria.length) {
            parts.push('', '**Critérios de Aceitação (Gherkin)**');
            parts.push('```gherkin');
            parts.push(this.gherkinBlock());
            parts.push('```');
          }
          return parts.join('\n');
        },
        async copyMarkdown() {
          const text = this.markdown();
          try {
            await navigator.clipboard.writeText(text);
            toast('Markdown copiado!');
          } catch(e) { 
            console.error('Erro ao copiar para clipboard:', e); 
            toast('Falha ao copiar.'); 
          }
        },
        downloadMarkdown() {
          const blob = new Blob([this.markdown()], { type: 'text/markdown;charset=utf-8' });
          const url = URL.createObjectURL(blob);
          const a = document.createElement('a');
          a.href = url; a.download = (this.story.title || 'user-story') + '.md';
          document.body.appendChild(a); a.click(); a.remove();
          URL.revokeObjectURL(url);
        },
        // --- Lint ---
        scanAmbiguities() {
          this.lint.issues = [];
          const fields = [
            ['Título','title'], ['Persona','persona'], ['Ação','action'], ['Benefício','benefit'],
            ['Descrição','description'], ['Dependências','dependencies']
          ];
          for (const [label, key] of fields) {
            const text = (this.story[key] || '').toLowerCase();
            if (!text) continue;
            for (const term of this.ambiguousTerms) {
              if (text.indexOf(term) !== -1) {
                this.lint.issues.push({ field: label, term });
              }
            }
          }
          // Critérios também
          this.story.criteria.forEach(sc => {
            const block = ((sc.given || '') + ' ' + (sc.when || '') + ' ' + (sc.then || '')).toLowerCase();
            for (const term of this.ambiguousTerms) {
              if (block.indexOf(term) !== -1) this.lint.issues.push({ field: 'Critério', term });
            }
          });
        },
        suggestionFor(term) {
          const map = {
            'rápido': 'Defina SLA (ex.: P95 < 2s).',
            'eficiente': 'Quantifique (ex.: reduzir consumo em 30%).',
            'seguro': 'Especifique controles (MFA, criptografia em repouso, RBAC).',
            'escalável': 'Defina carga-alvo (ex.: 1k req/s, auto-scaling).',
            'robusto': 'Liste tolerância a falhas e SLOs.',
            'intuitivo': 'Aponte heurísticas de usabilidade ou testes com usuários.',
            'simples': 'Explique o que é removido/omitido; limite de passos.',
            'melhor': 'Melhor que o quê? Dê baseline e métrica.',
            'otimizado': 'Para qual métrica? tempo, memória, custo? Quantifique.',
            'estável': 'Defina uptime/MTBF/MTTR.',
            'confiável': 'Defina taxa de erro permitida (ex.: <0,1%).',
            'flexível': 'Quais variações são suportadas? Liste parâmetros.'
          };
          return map[term] || 'Substitua por uma métrica observável.';
        },
        // --- Dark Mode (Flowbite Pattern) ---
        initDarkMode() {
          // Dark mode já foi inicializado no script anterior
          // Apenas sincronizar o estado
          this.isDarkMode = window.__darkModeState || false;
          
          // Escutar mudanças na preferência do sistema
          const mediaQuery = window.matchMedia('(prefers-color-scheme: dark)');
          mediaQuery.addEventListener('change', (e) => {
            // Só aplicar mudança automática se não há preferência salva
            if (!localStorage.getItem(this.darkModeKey)) {
              this.isDarkMode = e.matches;
              this.applyDarkMode();
            }
          });
        },
        toggleDarkMode() {
          this.isDarkMode = !this.isDarkMode;
          this.applyDarkMode();
          try {
            localStorage.setItem(this.darkModeKey, JSON.stringify(this.isDarkMode));
          } catch(e) {
            console.warn('Erro ao salvar preferência de dark mode:', e);
          }
        },
        applyDarkMode() {
          if (this.isDarkMode) {
            document.documentElement.classList.add('dark');
          } else {
            document.documentElement.classList.remove('dark');
          }
          // Atualizar estado global
          window.__darkModeState = this.isDarkMode;
        },
        // --- Persistência ---
        saveLocal() {
          try {
            const dataToSave = { 
              story: this.story, 
              checks: this.checks 
            };
            localStorage.setItem(this.storageKey, JSON.stringify(dataToSave));
          } catch(e) {
            console.warn('Falha ao salvar no localStorage:', e);
            toast('Erro ao salvar dados localmente');
          }
          this.checks.criteria = this.story.criteria.length > 0;
        },
        loadLocal() {
          let raw;
          try { 
            raw = localStorage.getItem(this.storageKey); 
          } catch(e) { 
            console.warn('Erro ao acessar localStorage:', e);
            raw = null; 
          }
          if (!raw) return;
          
          try {
            const data = JSON.parse(raw);
            if (data.story && typeof data.story === 'object') {
              this.story = Object.assign(this.story, data.story);
            }
            if (data.checks && typeof data.checks === 'object') {
              this.checks = Object.assign(this.checks, data.checks);
            }
          } catch(e) { 
            console.warn('Falha ao carregar dados do localStorage:', e); 
            toast('Erro ao carregar dados salvos');
          }
        },
        clearAll() {
          this.story = { title:'', persona:'', action:'', benefit:'', description:'', dependencies:'', tags:'', priority:'', estimate:'', criteria:[] };
          this.checks = { persona:false, value:false, criteria:false, dependencies:false, size:false };
          this.lint.issues = [];
          this.saveLocal();
        },
        // --- Score ---
        investScore() {
          let score = 0;
          const total = 5; // persona, valor, critérios, dependências, tamanho
          if (this.checks.persona) score += 1;
          if (this.checks.value) score += 1;
          if (this.story.criteria.length > 0) score += 1; // critérios
          if (this.checks.dependencies) score += 1;
          if (this.checks.size) score += 1;
          return Math.round((score / total) * 100);
        },
        // --- Self Tests (smoke) ---
        runTests() {
          const results = [];
          const assert = (name, cond) => results.push({ name, pass: !!cond });

          // Teste 1: linha inicial vazia
          const initialLine = this.userStoryLine();
          assert('UserStory vazia rende —', initialLine === '—');

          // Teste 2: happy path gera critério
          const snapshot = JSON.parse(JSON.stringify(this.story));
          this.story.persona = 'Aprovador';
          this.story.action = 'aprovar despesas';
          this.story.benefit = 'reduzir o tempo de reembolso';
          const before = this.story.criteria.length;
          this.generateHappyPath();
          const after = this.story.criteria.length;
          assert('Gerar Happy Path adiciona 1 critério', after === before + 1);

          // Teste 3: Gherkin contém Feature e Scenario
          const gherkin = this.gherkinBlock();
          assert('Gherkin tem Feature', gherkin.indexOf('Feature:') !== -1);
          assert('Gherkin tem Scenario', gherkin.indexOf('Scenario:') !== -1);

          // Teste 4: INVEST 0% quando nenhum check marcado
          this.checks = { persona:false, value:false, criteria:false, dependencies:false, size:false };
          this.story.criteria = [];
          assert('INVEST 0% sem checks', this.investScore() === 0);

          // Teste 5: INVEST 100% quando todos os checks e critérios
          this.checks = { persona:true, value:true, criteria:true, dependencies:true, size:true };
          this.story.criteria = [{id:'t', given:'g', when:'w', then:'t'}];
          assert('INVEST 100% com tudo marcado', this.investScore() === 100);

          // Restaurar snapshot
          this.story = Object.assign(this.story, snapshot);
          this.tests = results;
          return results;
        }
      }));
    });

    // Mini toast não intrusivo
    function toast(msg) {
      const el = document.createElement('div');
      el.textContent = msg;
      el.className = 'fixed bottom-4 left-1/2 -translate-x-1/2 bg-gray-900 text-white text-sm px-3 py-2 rounded-xl shadow-lg z-50';
      document.body.appendChild(el);
      setTimeout(() => { el.remove(); }, 1800);
    }
  </script>
  <script defer src="https://unpkg.com/alpinejs@3.x.x/dist/cdn.min.js" crossorigin="anonymous"></script>
  <script>
    // Inicializar Flowbite quando a página carregar
    document.addEventListener('DOMContentLoaded', function() {
      if (typeof window.initFlowbite === 'function') {
        window.initFlowbite();
      }
    });
  </script>
</head>
<body class="bg-white dark:bg-gray-900 text-gray-900 dark:text-white antialiased min-h-screen" x-data="app" x-init="initDarkMode(); loadLocal()" x-cloak>
  <div class="min-h-screen bg-gray-50 dark:bg-gray-900">
    <!-- Navbar Flowbite -->
    <nav class="bg-white border-gray-200 dark:bg-gray-900 sticky top-0 z-50 shadow-sm">
      <div class="max-w-screen-xl flex flex-wrap items-center justify-between mx-auto p-4">
        <!-- Logo/Brand -->
        <a href="#" class="flex items-center space-x-3 rtl:space-x-reverse">
          <div class="flex items-center justify-center w-8 h-8 bg-blue-600 rounded-lg">
            <svg class="w-5 h-5 text-white" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
              <path d="M4 19h16"/>
              <path d="M4 5h16"/>
              <path d="M7 5v14"/>
              <path d="M17 5v14"/>
            </svg>
          </div>
          <div>
            <span class="self-center text-xl font-semibold whitespace-nowrap dark:text-white">User Stories Helper</span>
            <span class="block text-xs text-gray-500 dark:text-gray-400">MVP Edition</span>
          </div>
        </a>

        <!-- Mobile menu button -->
        <button data-collapse-toggle="navbar-default" type="button" class="inline-flex items-center p-2 w-10 h-10 justify-center text-sm text-gray-500 rounded-lg md:hidden hover:bg-gray-100 focus:outline-none focus:ring-2 focus:ring-gray-200 dark:text-gray-400 dark:hover:bg-gray-700 dark:focus:ring-gray-600" aria-controls="navbar-default" aria-expanded="false">
          <span class="sr-only">Open main menu</span>
          <svg class="w-5 h-5" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 17 14">
            <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M1 1h15M1 7h15M1 13h15"/>
          </svg>
        </button>

        <!-- Navigation items -->
        <div class="hidden w-full md:block md:w-auto" id="navbar-default">
          <ul class="font-medium flex flex-col p-4 md:p-0 mt-4 border border-gray-100 rounded-lg bg-gray-50 md:flex-row md:space-x-8 rtl:space-x-reverse md:mt-0 md:border-0 md:bg-white dark:bg-gray-800 md:dark:bg-gray-900 dark:border-gray-700">
            <!-- Actions -->
            <li class="flex items-center space-x-2">
              <!-- Dark mode toggle - Flowbite pattern -->
              <button @click="toggleDarkMode()" type="button" class="text-gray-500 dark:text-gray-400 hover:bg-gray-100 dark:hover:bg-gray-700 focus:outline-none focus:ring-4 focus:ring-gray-200 dark:focus:ring-gray-700 rounded-lg text-sm p-2.5 transition-colors" aria-label="Alternar tema">
                <!-- Sun icon (light mode) -->
                <svg x-show="!isDarkMode" x-transition class="w-5 h-5" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 20 20">
                  <path d="M10 15a5 5 0 1 0 0-10 5 5 0 0 0 0 10Zm0-11a1 1 0 0 0 1-1V1a1 1 0 0 0-2 0v2a1 1 0 0 0 1 1Zm0 12a1 1 0 0 0-1 1v2a1 1 0 1 0 2 0v-2a1 1 0 0 0-1-1ZM4.343 5.757a1 1 0 0 0 1.414-1.414L4.343 2.929a1 1 0 0 0-1.414 1.414l1.414 1.414Zm11.314 8.486a1 1 0 0 0-1.414 1.414l1.414 1.414a1 1 0 0 0 1.414-1.414l-1.414-1.414ZM4 10a1 1 0 0 0-1-1H1a1 1 0 0 0 0 2h2a1 1 0 0 0 1-1Zm15-1h-2a1 1 0 1 0 0 2h2a1 1 0 0 0 0-2ZM4.343 14.243l-1.414 1.414a1 1 0 1 0 1.414 1.414l1.414-1.414a1 1 0 0 0-1.414-1.414ZM14.95 6.05a1 1 0 0 0 .707-.293l1.414-1.414a1 1 0 1 0-1.414-1.414l-1.414 1.414a1 1 0 0 0 .707 1.707Z"/>
                </svg>
                <!-- Moon icon (dark mode) -->
                <svg x-show="isDarkMode" x-transition class="w-5 h-5" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 18 20">
                  <path d="M17.8 13.75a1 1 0 0 0-.859-.5A7.488 7.488 0 0 1 10.52 2a1 1 0 0 0 0-.969A1.035 1.035 0 0 0 9.687.5h-.113a9.5 9.5 0 1 0 8.222 14.247 1 1 0 0 0 .004-.997Z"/>
                </svg>
              </button>

              <!-- Clear button -->
              <button @click="clearAll()" type="button" class="text-gray-900 bg-white border border-gray-300 focus:outline-none hover:bg-gray-100 focus:ring-4 focus:ring-gray-100 font-medium rounded-lg text-sm px-3 py-2 dark:bg-gray-800 dark:text-white dark:border-gray-600 dark:hover:bg-gray-700 dark:hover:border-gray-600 dark:focus:ring-gray-700" aria-label="Limpar todos os campos">
                <svg class="w-4 h-4 inline mr-1.5" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                  <path d="M3 6h18"/>
                  <path d="M19 6v14c0 1-1 2-2 2H7c-1 0-2-1-2-2V6"/>
                  <path d="M8 6V4c0-1 1-2 2-2h4c1 0 2 1 2 2v2"/>
                </svg>
                Novo
              </button>

              <!-- Export dropdown -->
              <button id="dropdownMenuIconButton" data-dropdown-toggle="dropdownDots" class="inline-flex items-center p-2 text-sm font-medium text-center text-gray-900 bg-white rounded-lg hover:bg-gray-100 focus:ring-4 focus:outline-none dark:text-white focus:ring-gray-50 dark:bg-gray-800 dark:hover:bg-gray-700 dark:focus:ring-gray-600 border border-gray-300 dark:border-gray-600" type="button">
                <svg class="w-4 h-4 mr-2" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                  <path d="M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4"/>
                  <polyline points="7,10 12,15 17,10"/>
                  <line x1="12" y1="15" x2="12" y2="3"/>
                </svg>
                Exportar
                <svg class="w-2.5 h-2.5 ms-2.5" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 10 6">
                  <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="m1 1 4 4 4-4"/>
                </svg>
              </button>

              <!-- Dropdown menu -->
              <div id="dropdownDots" class="z-10 hidden bg-white divide-y divide-gray-100 rounded-lg shadow w-44 dark:bg-gray-700 dark:divide-gray-600">
                <ul class="py-2 text-sm text-gray-700 dark:text-gray-200" aria-labelledby="dropdownMenuIconButton">
                  <li>
                    <a href="#" @click="copyMarkdown()" class="block px-4 py-2 hover:bg-gray-100 dark:hover:bg-gray-600 dark:hover:text-white">
                      <svg class="w-4 h-4 inline mr-2" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                        <rect x="9" y="9" width="13" height="13" rx="2" ry="2"/>
                        <path d="M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1"/>
                      </svg>
                      Copiar Markdown
                    </a>
                  </li>
                  <li>
                    <a href="#" @click="downloadMarkdown()" class="block px-4 py-2 hover:bg-gray-100 dark:hover:bg-gray-600 dark:hover:text-white">
                      <svg class="w-4 h-4 inline mr-2" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                        <path d="M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4"/>
                        <polyline points="7,10 12,15 17,10"/>
                        <line x1="12" y1="15" x2="12" y2="3"/>
                      </svg>
                      Baixar Arquivo
                    </a>
                  </li>
                </ul>
              </div>

              <!-- Primary action button -->
              <button @click="copyMarkdown()" type="button" class="text-white bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:ring-blue-300 font-medium rounded-lg text-sm px-4 py-2 dark:bg-blue-600 dark:hover:bg-blue-700 focus:outline-none dark:focus:ring-blue-800" aria-label="Copiar história em formato Markdown">
                <svg class="w-4 h-4 inline mr-1.5" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                  <rect x="9" y="9" width="13" height="13" rx="2" ry="2"/>
                  <path d="M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1"/>
                </svg>
                Copiar
              </button>
            </li>
          </ul>
        </div>
      </div>
    </nav>

    <!-- Main -->
    <main class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
      <div class="grid grid-cols-1 lg:grid-cols-2 gap-6">
        <!-- Editor Column -->
        <section class="space-y-6">
        <!-- Card: Básico da história -->
        <div class="max-w-sm p-6 bg-white border border-gray-200 rounded-lg shadow dark:bg-gray-800 dark:border-gray-700 w-full max-w-none" @input="saveLocal()">
          <div class="flex items-center mb-4">
            <div class="inline-flex items-center justify-center w-8 h-8 me-3 text-blue-500 bg-blue-100 rounded-lg dark:bg-blue-900 dark:text-blue-300">
              <svg class="w-4 h-4" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"><path d="M12 20l9-16H3l9 16z"/></svg>
            </div>
            <h5 class="mb-0 text-lg font-semibold text-gray-900 dark:text-white">História — básico</h5>
          </div>
          <div class="grid grid-cols-1 sm:grid-cols-2 gap-6">
            <div>
              <label for="story-title" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Título</label>
              <input x-model.trim="story.title" @blur="autoTitle()" type="text" id="story-title" class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500" placeholder="Aprovação de despesas no mobile" />
            </div>
            <div>
              <label for="story-persona" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Persona (Como)</label>
              <input x-model.trim="story.persona" type="text" id="story-persona" class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500" placeholder="Aprovador financeiro" />
            </div>
            <div class="sm:col-span-2">
              <label for="story-action" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Ação (Eu quero)</label>
              <input x-model.trim="story.action" type="text" id="story-action" class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500" placeholder="aprovar despesas pelo aplicativo" />
            </div>
            <div class="sm:col-span-2">
              <label for="story-benefit" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Benefício (Para)</label>
              <input x-model.trim="story.benefit" type="text" id="story-benefit" class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500" placeholder="reduzir o tempo de reembolso" />
            </div>
          </div>
          <div class="mt-6 p-4 bg-gray-50 dark:bg-gray-800 rounded-lg border border-gray-200 dark:border-gray-700">
            <p class="text-sm">
              <span class="font-medium text-gray-700 dark:text-gray-300">User Story:</span>
              <span x-text="userStoryLine()" class="ml-2 text-gray-600 dark:text-gray-400"></span>
            </p>
          </div>
        </div>

        <!-- Card: Detalhes -->
        <div class="max-w-sm p-6 bg-white border border-gray-200 rounded-lg shadow dark:bg-gray-800 dark:border-gray-700 w-full max-w-none" @input="saveLocal()">
          <div class="flex items-center mb-4">
            <div class="inline-flex items-center justify-center w-8 h-8 me-3 text-green-500 bg-green-100 rounded-lg dark:bg-green-900 dark:text-green-300">
              <svg class="w-4 h-4" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"><path d="M4 4h16v16H4z"/><path d="M9 4v16"/></svg>
            </div>
            <h5 class="mb-0 text-lg font-semibold text-gray-900 dark:text-white">Detalhes</h5>
          </div>
          <div class="grid grid-cols-1 gap-6">
            <div>
              <label for="story-description" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Descrição curta</label>
              <textarea x-model.trim="story.description" rows="4" id="story-description" class="block p-2.5 w-full text-sm text-gray-900 bg-gray-50 rounded-lg border border-gray-300 focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500" placeholder="Contexto, restrições, hipóteses"></textarea>
            </div>
            <div class="grid grid-cols-1 sm:grid-cols-2 gap-6">
              <div>
                <label for="story-dependencies" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Dependências</label>
                <input x-model.trim="story.dependencies" type="text" id="story-dependencies" class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500" placeholder="Ex: autenticação, políticas de aprovação" />
              </div>
              <div>
                <label for="story-tags" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Tags</label>
                <input x-model.trim="story.tags" type="text" id="story-tags" class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500" placeholder="fintech, mobile, aprovação" />
              </div>
            </div>
            <div class="grid grid-cols-2 sm:grid-cols-4 gap-6">
              <div>
                <label for="story-priority" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Prioridade</label>
                <select x-model="story.priority" id="story-priority" class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500">
                  <option value="">—</option>
                  <option>Must</option>
                  <option>Should</option>
                  <option>Could</option>
                  <option>Won't</option>
                </select>
              </div>
              <div>
                <label for="story-estimate" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Estimativa (pts)</label>
                <input x-model="story.estimate" type="number" min="0" step="0.5" id="story-estimate" class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500" />
              </div>
            </div>
          </div>
        </div>

        <!-- Card: Critérios de Aceitação -->
        <div class="max-w-sm p-6 bg-white border border-gray-200 rounded-lg shadow dark:bg-gray-800 dark:border-gray-700 w-full max-w-none" @input="saveLocal()">
          <div class="flex items-center justify-between mb-4">
            <div class="flex items-center">
              <div class="inline-flex items-center justify-center w-8 h-8 me-3 text-emerald-500 bg-emerald-100 rounded-lg dark:bg-emerald-900 dark:text-emerald-300">
                <svg class="w-4 h-4" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"><path d="M3 6h18"/><path d="M3 12h18"/><path d="M3 18h18"/></svg>
              </div>
              <h5 class="mb-0 text-lg font-semibold text-gray-900 dark:text-white">Critérios de Aceitação</h5>
            </div>
            <div class="flex items-center gap-2">
              <button @click="addScenario()" class="px-3 py-1.5 text-sm font-medium text-gray-700 dark:text-gray-300 border border-gray-300 dark:border-gray-600 rounded-md hover:bg-gray-50 dark:hover:bg-gray-800 transition-colors" aria-label="Adicionar novo cenário de teste">
                <svg class="w-4 h-4 inline mr-1" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"><line x1="12" y1="5" x2="12" y2="19"/><line x1="5" y1="12" x2="19" y2="12"/></svg>
                Adicionar
              </button>
              <button @click="generateHappyPath()" class="px-3 py-1.5 text-sm font-medium bg-emerald-600 text-white rounded-md hover:bg-emerald-700 transition-colors" aria-label="Gerar automaticamente cenário de caminho feliz">
                <svg class="w-4 h-4 inline mr-1" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"><path d="M13 2L3 14h9l-1 8 10-12h-9l1-8z"/></svg>
                Happy Path
              </button>
            </div>
          </div>
          <template x-for="(sc, idx) in story.criteria" :key="sc.id">
            <div class="border border-gray-200 dark:border-gray-700 rounded-lg p-4 mb-4 bg-gray-50 dark:bg-gray-800">
              <div class="flex items-center justify-between mb-4">
                <div class="flex items-center gap-2">
                  <div class="w-6 h-6 rounded-full bg-emerald-600 flex items-center justify-center text-white text-xs font-medium" x-text="idx + 1"></div>
                  <div class="text-sm font-medium text-gray-700 dark:text-gray-300">Cenário <span x-text="idx + 1"></span></div>
                </div>
                <button @click="removeScenario(idx)" class="text-xs text-red-600 hover:text-red-800 font-medium" aria-label="Remover este cenário">
                  <svg class="w-4 h-4 inline mr-1" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"><polyline points="3,6 5,6 21,6"/><path d="M19,6v14a2,2,0,0,1-2,2H7a2,2,0,0,1-2-2V6m3,0V4a2,2,0,0,1,2-2h4a2,2,0,0,1,2,2V6"/></svg>
                  Remover
                </button>
              </div>
              <div class="grid grid-cols-1 gap-4">
                <div>
                  <label class="block mb-2 text-xs font-semibold text-emerald-700 dark:text-emerald-300 uppercase tracking-wide">Given</label>
                  <input x-model.trim="sc.given" type="text" class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-emerald-500 focus:border-emerald-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-emerald-500 dark:focus:border-emerald-500" placeholder="que sou um aprovador autenticado"/>
                </div>
                <div>
                  <label class="block mb-2 text-xs font-semibold text-blue-700 dark:text-blue-300 uppercase tracking-wide">When</label>
                  <input x-model.trim="sc.when" type="text" class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500" placeholder="aprovo uma despesa com política válida"/>
                </div>
                <div>
                  <label class="block mb-2 text-xs font-semibold text-purple-700 dark:text-purple-300 uppercase tracking-wide">Then</label>
                  <input x-model.trim="sc.then" type="text" class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-purple-500 focus:border-purple-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-purple-500 dark:focus:border-purple-500" placeholder="o status muda para 'Aprovada' e o solicitante é notificado"/>
                </div>
              </div>
            </div>
          </template>
          <div class="mt-4 p-3 bg-amber-50 dark:bg-amber-900/20 rounded-lg border border-amber-200 dark:border-amber-800">
            <p class="text-xs text-amber-800 dark:text-amber-200 flex items-start gap-2">
              <svg class="w-4 h-4 mt-0.5 flex-shrink-0" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"><path d="M12 9v4"/><path d="M12 17h.01"/><circle cx="12" cy="12" r="10"/></svg>
              <span><strong>Dica:</strong> escreva em linguagem observável/testável. Evite termos vagos como "rápido" — defina métricas.</span>
            </p>
          </div>
        </div>
      </section>

      <!-- Painel lateral -->
      <aside class="lg:col-span-4 space-y-6">
        <!-- Preview & Export -->
        <div class="max-w-sm p-6 bg-white border border-gray-200 rounded-lg shadow dark:bg-gray-800 dark:border-gray-700 w-full max-w-none">
          <div class="flex items-center mb-4">
            <div class="inline-flex items-center justify-center w-8 h-8 me-3 text-gray-500 bg-gray-100 rounded-lg dark:bg-gray-700 dark:text-gray-400">
              <svg class="w-4 h-4" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"><path d="M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z"/><polyline points="14,2 14,8 20,8"/><line x1="16" y1="13" x2="8" y2="13"/><line x1="16" y1="17" x2="8" y2="17"/><polyline points="10,9 9,9 8,9"/></svg>
            </div>
            <h5 class="mb-0 text-lg font-semibold text-gray-900 dark:text-white">Preview & Markdown</h5>
          </div>
          <div class="prose prose-sm max-w-none dark:prose-invert">
            <h3 class="mt-0 text-lg font-semibold text-gray-900 dark:text-white" x-text="story.title || 'Sem título'"></h3>
            <div class="p-3 bg-blue-50 dark:bg-blue-900/20 rounded-lg border border-blue-200 dark:border-blue-800 my-4">
              <p class="mb-0"><strong class="text-blue-700 dark:text-blue-300">User Story:</strong> <span x-text="userStoryLine()" class="text-gray-700 dark:text-gray-300"></span></p>
            </div>
            <template x-if="story.description">
              <div class="p-3 bg-gray-50 dark:bg-gray-800 rounded-lg border border-gray-200 dark:border-gray-700">
                <p class="mb-0"><strong class="text-gray-700 dark:text-gray-300">Descrição:</strong> <span x-text="story.description" class="text-gray-600 dark:text-gray-400"></span></p>
              </div>
            </template>
            <template x-if="story.dependencies">
              <p><strong class="text-gray-700 dark:text-gray-300">Dependências:</strong> <span x-text="story.dependencies" class="text-gray-600 dark:text-gray-400"></span></p>
            </template>
            <template x-if="story.tags">
              <p><strong class="text-gray-700 dark:text-gray-300">Tags:</strong> <span x-text="story.tags" class="text-gray-600 dark:text-gray-400"></span></p>
            </template>
            <template x-if="story.priority || story.estimate">
              <p><strong class="text-gray-700 dark:text-gray-300">Prioridade/Estimativa:</strong> <span x-text="story.priority || '—'" class="text-gray-600 dark:text-gray-400"></span> • <span x-text="story.estimate ? story.estimate + ' pts' : '—'" class="text-gray-600 dark:text-gray-400"></span></p>
            </template>
            <template x-if="story.criteria.length">
              <div>
                <h4 class="text-gray-700 dark:text-gray-300 font-semibold">Critérios de Aceitação</h4>
                <pre class="bg-gray-900 dark:bg-gray-950 text-gray-100 border border-gray-300 dark:border-gray-700 rounded-lg p-4 overflow-auto text-sm font-mono" x-text="gherkinBlock()"></pre>
              </div>
            </template>
          </div>
          <div class="mt-6 flex items-center gap-2">
            <button @click="copyMarkdown()" class="flex-1 px-4 py-2 text-sm font-medium bg-blue-600 text-white rounded-md hover:bg-blue-700 transition-colors" aria-label="Copiar preview em formato Markdown">
              <svg class="w-4 h-4 inline mr-1.5" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"><rect x="9" y="9" width="13" height="13" rx="2" ry="2"/><path d="M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1"/></svg>
              Copiar
            </button>
            <button @click="downloadMarkdown()" class="px-4 py-2 text-sm font-medium text-gray-700 dark:text-gray-300 border border-gray-300 dark:border-gray-600 rounded-md hover:bg-gray-50 dark:hover:bg-gray-800 transition-colors" aria-label="Baixar preview como arquivo Markdown">
              <svg class="w-4 h-4" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"><path d="M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4"/><polyline points="7,10 12,15 17,10"/><line x1="12" y1="15" x2="12" y2="3"/></svg>
            </button>
          </div>
        </div>

        <!-- Lint de Ambiguidade -->
        <div class="max-w-sm p-6 bg-white border border-gray-200 rounded-lg shadow dark:bg-gray-800 dark:border-gray-700 w-full max-w-none">
          <div class="flex items-center justify-between mb-4">
            <div class="flex items-center">
              <div class="inline-flex items-center justify-center w-8 h-8 me-3 text-amber-500 bg-amber-100 rounded-lg dark:bg-amber-900 dark:text-amber-300">
                <svg class="w-4 h-4" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"><path d="M10.29 3.86L1.82 18a2 2 0 001.71 3h16.94a2 2 0 001.71-3L13.71 3.86a2 2 0 00-3.42 0z"/><path d="M12 9v4"/><path d="M12 17h.01"/></svg>
              </div>
              <h5 class="mb-0 text-lg font-semibold text-gray-900 dark:text-white">Lint de Ambiguidade</h5>
            </div>
            <button @click="scanAmbiguities()" class="text-xs text-gray-500 dark:text-gray-400 hover:text-gray-700 dark:hover:text-gray-200" aria-label="Executar nova verificação de termos ambíguos">Reescanear</button>
          </div>
          <template x-if="lint.issues.length === 0">
            <p class="text-sm text-emerald-700 bg-emerald-50 border border-emerald-200 rounded-xl p-2 mt-3">Nenhuma ambiguidade óbvia encontrada.</p>
          </template>
          <template x-if="lint.issues.length">
            <ul class="mt-3 space-y-2">
              <template x-for="item in lint.issues" :key="item.term+item.field">
                <li class="text-sm bg-amber-50 border border-amber-200 rounded-xl p-2">
                  <span class="font-medium" x-text="item.field"></span> → termo vago <code class="px-1">“<span x-text="item.term"></span>”</code>.
                  <span class="block text-gray-700" x-text="suggestionFor(item.term)"></span>
                </li>
              </template>
            </ul>
          </template>
          <details class="mt-3 text-xs text-gray-600">
            <summary class="cursor-pointer">Lista monitorada</summary>
            <p class="mt-1" x-text="ambiguousTerms.join(', ')"></p>
          </details>
        </div>

        <!-- DoR & INVEST -->
        <div class="max-w-sm p-6 bg-white border border-gray-200 rounded-lg shadow dark:bg-gray-800 dark:border-gray-700 w-full max-w-none hover:shadow-lg transition-all duration-300" @input="saveLocal()">
          <div class="flex items-center mb-4">
            <div class="inline-flex items-center justify-center w-8 h-8 me-3 text-emerald-500 bg-emerald-100 rounded-lg dark:bg-emerald-900 dark:text-emerald-300">
              <svg class="w-4 h-4" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"><path d="M9 12l2 2 4-4"/><circle cx="12" cy="12" r="10"/></svg>
            </div>
            <h5 class="mb-0 text-lg font-semibold bg-gradient-to-r from-emerald-600 to-teal-600 bg-clip-text text-transparent">
              Definition of Ready & 
              <button data-popover-target="invest-popover" data-popover-placement="top" type="button" class="text-emerald-600 hover:text-emerald-800 dark:text-emerald-400 dark:hover:text-emerald-300 underline decoration-dotted underline-offset-2">
                INVEST
              </button>
            </h5>
            
            <!-- Popover INVEST -->
            <div data-popover id="invest-popover" role="tooltip" class="absolute z-10 invisible inline-block w-80 text-sm text-gray-500 transition-opacity duration-300 bg-white border border-gray-200 rounded-lg shadow-sm opacity-0 dark:text-gray-400 dark:border-gray-600 dark:bg-gray-800">
              <div class="px-4 py-3 bg-gray-100 border-b border-gray-200 rounded-t-lg dark:border-gray-600 dark:bg-gray-700">
                <h3 class="font-semibold text-gray-900 dark:text-white">Critérios INVEST</h3>
              </div>
              <div class="px-4 py-3 space-y-2">
                <div class="flex items-start gap-2">
                  <span class="font-bold text-emerald-600 dark:text-emerald-400 w-3">I</span>
                  <div>
                    <span class="font-medium">Independent</span>
                    <p class="text-xs text-gray-500 dark:text-gray-400">Independente de outras histórias</p>
                  </div>
                </div>
                <div class="flex items-start gap-2">
                  <span class="font-bold text-emerald-600 dark:text-emerald-400 w-3">N</span>
                  <div>
                    <span class="font-medium">Negotiable</span>
                    <p class="text-xs text-gray-500 dark:text-gray-400">Detalhes podem ser discutidos</p>
                  </div>
                </div>
                <div class="flex items-start gap-2">
                  <span class="font-bold text-emerald-600 dark:text-emerald-400 w-3">V</span>
                  <div>
                    <span class="font-medium">Valuable</span>
                    <p class="text-xs text-gray-500 dark:text-gray-400">Entrega valor ao usuário</p>
                  </div>
                </div>
                <div class="flex items-start gap-2">
                  <span class="font-bold text-emerald-600 dark:text-emerald-400 w-3">E</span>
                  <div>
                    <span class="font-medium">Estimable</span>
                    <p class="text-xs text-gray-500 dark:text-gray-400">Pode ser estimada pelo time</p>
                  </div>
                </div>
                <div class="flex items-start gap-2">
                  <span class="font-bold text-emerald-600 dark:text-emerald-400 w-3">S</span>
                  <div>
                    <span class="font-medium">Small</span>
                    <p class="text-xs text-gray-500 dark:text-gray-400">Pequena o suficiente para um sprint</p>
                  </div>
                </div>
                <div class="flex items-start gap-2">
                  <span class="font-bold text-emerald-600 dark:text-emerald-400 w-3">T</span>
                  <div>
                    <span class="font-medium">Testable</span>
                    <p class="text-xs text-gray-500 dark:text-gray-400">Pode ser testada/validada</p>
                  </div>
                </div>
              </div>
              <div data-popper-arrow></div>
            </div>
          </div>
          <div class="grid grid-cols-1 gap-3 text-sm">
            <div class="flex items-center p-3 rounded-lg border border-gray-200 dark:border-gray-700 hover:bg-gray-50 dark:hover:bg-gray-800">
              <input id="check-persona" type="checkbox" x-model="checks.persona" class="w-4 h-4 text-green-600 bg-gray-100 border-gray-300 rounded focus:ring-green-500 dark:focus:ring-green-600 dark:ring-offset-gray-800 focus:ring-2 dark:bg-gray-700 dark:border-gray-600"> 
              <label for="check-persona" class="ms-3 text-sm font-medium text-gray-700 dark:text-gray-300 cursor-pointer">Persona definida</label>
            </div>
            <div class="flex items-center p-3 rounded-lg border border-gray-200 dark:border-gray-700 hover:bg-gray-50 dark:hover:bg-gray-800">
              <input id="check-value" type="checkbox" x-model="checks.value" class="w-4 h-4 text-green-600 bg-gray-100 border-gray-300 rounded focus:ring-green-500 dark:focus:ring-green-600 dark:ring-offset-gray-800 focus:ring-2 dark:bg-gray-700 dark:border-gray-600"> 
              <label for="check-value" class="ms-3 text-sm font-medium text-gray-700 dark:text-gray-300 cursor-pointer">Valor de negócio claro</label>
            </div>
            <div class="flex items-center p-3 rounded-lg border border-gray-200 dark:border-gray-700 hover:bg-gray-50 dark:hover:bg-gray-800">
              <input id="check-criteria" type="checkbox" x-model="checks.criteria" class="w-4 h-4 text-green-600 bg-gray-100 border-gray-300 rounded focus:ring-green-500 dark:focus:ring-green-600 dark:ring-offset-gray-800 focus:ring-2 dark:bg-gray-700 dark:border-gray-600"> 
              <label for="check-criteria" class="ms-3 text-sm font-medium text-gray-700 dark:text-gray-300 cursor-pointer">Critérios testáveis</label>
            </div>
            <div class="flex items-center p-3 rounded-lg border border-gray-200 dark:border-gray-700 hover:bg-gray-50 dark:hover:bg-gray-800">
              <input id="check-dependencies" type="checkbox" x-model="checks.dependencies" class="w-4 h-4 text-green-600 bg-gray-100 border-gray-300 rounded focus:ring-green-500 dark:focus:ring-green-600 dark:ring-offset-gray-800 focus:ring-2 dark:bg-gray-700 dark:border-gray-600"> 
              <label for="check-dependencies" class="ms-3 text-sm font-medium text-gray-700 dark:text-gray-300 cursor-pointer">Dependências mapeadas</label>
            </div>
            <div class="flex items-center p-3 rounded-lg border border-gray-200 dark:border-gray-700 hover:bg-gray-50 dark:hover:bg-gray-800">
              <input id="check-size" type="checkbox" x-model="checks.size" class="w-4 h-4 text-green-600 bg-gray-100 border-gray-300 rounded focus:ring-green-500 dark:focus:ring-green-600 dark:ring-offset-gray-800 focus:ring-2 dark:bg-gray-700 dark:border-gray-600"> 
              <label for="check-size" class="ms-3 text-sm font-medium text-gray-700 dark:text-gray-300 cursor-pointer">Pequena (≤ 1 sprint)</label>
            </div>
          </div>
          <div class="mt-6">
            <div class="flex items-baseline justify-between mb-3">
              <span class="text-sm font-medium text-gray-700 dark:text-gray-300">Score INVEST</span>
              <span class="text-xl font-semibold text-green-600 dark:text-green-400" x-text="investScore() + '%'">0%</span>
            </div>
            <div class="w-full bg-gray-200 dark:bg-gray-700 rounded-full h-2">
              <div class="bg-green-600 h-2 rounded-full transition-all duration-500" :style="'width:' + investScore() + '%'"></div>
            </div>
          </div>
        </div>

        <!-- Testes (Smoke) -->
        <div class="max-w-sm p-6 bg-white border border-gray-200 rounded-lg shadow dark:bg-gray-800 dark:border-gray-700 w-full max-w-none">
          <div class="flex items-center justify-between mb-4">
            <div class="flex items-center">
              <div class="inline-flex items-center justify-center w-8 h-8 me-3 text-purple-500 bg-purple-100 rounded-lg dark:bg-purple-900 dark:text-purple-300">
                <svg class="w-4 h-4" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"><path d="M9 11l3 3L22 4"/><path d="M21 12v7a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h11"/></svg>
              </div>
              <h5 class="mb-0 text-lg font-semibold text-gray-900 dark:text-white">Testes rápidos</h5>
            </div>
            <button @click="runTests()" class="px-3 py-1.5 text-sm font-medium bg-purple-600 text-white rounded-md hover:bg-purple-700 transition-colors" aria-label="Executar testes de verificação do sistema">
              <svg class="w-4 h-4 inline mr-1" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"><polygon points="5,3 19,12 5,21 5,3"/></svg>
              Executar
            </button>
          </div>
          <template x-if="!tests.length">
            <div class="p-4 bg-gray-50 dark:bg-gray-800 rounded-lg border border-gray-200 dark:border-gray-700">
              <p class="text-sm text-gray-600 dark:text-gray-400 text-center">Nenhum teste executado ainda.</p>
            </div>
          </template>
          <ul class="space-y-2" x-show="tests.length">
            <template x-for="t in tests" :key="t.name">
              <li class="flex items-start gap-3 p-3 rounded-lg border border-gray-200 dark:border-gray-700 hover:bg-gray-50 dark:hover:bg-gray-800">
                <div class="w-5 h-5 rounded-full flex items-center justify-center flex-shrink-0 mt-0.5" :class="t.pass ? 'bg-green-500' : 'bg-red-500'">
                  <svg x-show="t.pass" class="w-3 h-3 text-white" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"><polyline points="20,6 9,17 4,12"/></svg>
                  <svg x-show="!t.pass" class="w-3 h-3 text-white" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"><line x1="18" y1="6" x2="6" y2="18"/><line x1="6" y1="6" x2="18" y2="18"/></svg>
                </div>
                <div class="flex-1">
                  <p class="text-sm font-medium text-gray-800 dark:text-gray-200" x-text="t.name"></p>
                  <p class="text-xs font-medium mt-1" :class="t.pass ? 'text-green-600 dark:text-green-400' : 'text-red-600 dark:text-red-400'" x-text="t.pass ? 'PASSOU' : 'FALHOU'"></p>
                </div>
              </li>
            </template>
          </ul>
        </div>
      </aside>
    </main>

    <!-- Footer -->
    <footer class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 pb-8 pt-6">
      <div class="text-center border-t border-gray-200 dark:border-gray-800 pt-6">
        <p class="text-sm text-gray-500 dark:text-gray-400">
          Feito com ❤️ usando HTML + Tailwind + Alpine.js
        </p>
        <p class="text-xs text-gray-400 dark:text-gray-500 mt-1">
          Dados salvos localmente no seu navegador
        </p>
      </div>
    </footer>
  </div>
  
  <!-- Carregar Flowbite antes do Alpine.js para garantir compatibilidade -->
  <script src="https://cdn.jsdelivr.net/npm/flowbite@3.1.2/dist/flowbite.min.js"></script>

</body>
</html>
